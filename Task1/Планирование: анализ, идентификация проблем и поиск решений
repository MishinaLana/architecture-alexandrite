# Проанализируйте схему и описание системы. Идентифицируйте существующие и потенциальные проблемные места. Напишите их список.

## Текущие проблемы системы

1. Низкая производительность

- Медленный дашборд с фильтрами

- Синхронный расчет стоимости до 30 минут с таймаутами и высокой нагрузкой

2. Потеря данных

- Потеря и задержка заказов между CRM и MES

- Потери сообщений в очередях

- Ошибки в обработке статусов

- Множество несинхронизированных между собой источников информации о статусе заказа 

3. Проблемы интеграции и API

- Интеграция через RabbitMQ приводит к потере заказов

- Незащищенное API без ограничений частоты и скорости запросов, без проверки авторизации

4. Инфраструктура и архитектура

- Единые точки отказа 

- Отсутствует горизонтальное масштабирование и отказоустойчивость

- Критичные функции на монолите, что не позволяет их развивать независимо

5. Неэффективная разработка и операции

- Отсутствует автоматизированное тестирование

- Отсутствие кеширования

- Неоптимизированные запросы к БД


## Потенциальные риски

1. Безопасность. Открытый API расчета стоимости уязвим для взлома и DDoS-атак

2. Масштабируемость. Текущая архитектура не справится с планируемым ростом нагрузки

3. Скорость разработки. Сильная связанность систем и монолитная архитектура будут тормозить внедрение новых функций




# Разработайте инициативы, которые необходимы для устранения нежелательных ситуаций. Запишите их в список.

1. Расчет стоимости заказа

= Вынести расчет стоимости в отдельный микросервиссервис

= Внедрить асинхронную модель для расчета стоимости

= Внедрить RabbitMQ для управления очередью задач для балансировки нагрузки

2. Дашборд заказов в MES

- Внедрить агрегирующую таблицу для статусов заказов

- Добавить индексирование по полям фильтров и сортировки

- Реализовать кеширование для результатов запроса дашборда

3. Интеграция CRM и MES

- Переработать текущую реализации обмена сообщениями через RabbitMQ

- Внедрить Retry, Dead Letter Queue для гарантированной доставки сообщений

- Реализовать идемпотентность на стороне consumer (MES, CRM) для избежания дублирующей обработки

4. Защита и мониторинг API

- Внедрить API Gateway перед MES API

- Настроить rate-limiting

- Добавить авторизацию

5. База данных

- Выделить отдельные инстансы БД для чтения и записи

- Внедрить кластеризацию БД для отказоустойчивости

6. Автоматизация процессов разработки

- Внедрить автоматизированное E2E-тестирования

- Настроить полноценный CI/CD пайплайна с автоматическим деплоем на preprod окружение и ручным подтверждением для prod

- Создать preprod-окружение, максимально приближенное к prod



# Расставьте инициативы в порядке приоритета. Опишите ход своих рассуждений и ответьте на вопросы

1. Мониторинг API

Помоговает своевременно отслеживать существующие и потенциальне проблемы

2. Надёжная интеграция CRM и MES

Прямо устраняет главную причину потери заказов и срывов сроков. Внедрение гарантированной доставки и идемпотентности остановит уход клиентов

3. Оптимизация дашборда MES

Влияет на скорость работы операторов и выполнение заказов

4. Защита API

Защищает систему от внешних угроз. rate-limiting не допустит повторного сбоя. Стабильная работа API под нагрузкой, контроль над входящим трафиком

5. Сервис расчета стоимости

Решает проблему таймаутов и снимает основную нагрузку с MES

6. Автоматизация CI/CD

Автоматизация тестов и деплоя ускорит все остальные инициативы и предотвратит регрессии. Сокращение сроков релизов, меньше ошибок

7. Модернизация БД

Приоритет: Шестой. Укрепление фундамента.

Повышение отказоустойчивости и производительности базы данных



Целевая архитектура через 6 месяцев:

- Интеграция CRM и MES работает через RabbitMQ с гарантированной доставкой

- API Gateway с rate-limiting контролирует внешнюю нагрузку

- Отдельный сервис расчёта стоимости, убирающий нагрузку с MES

- PreProd-окружение

- Базовая автоматизация тестирования


Если бы можно было выполнить только три пункта, то выбрала бы первые три пункта:

Надёжная интеграция CRM и MES. Устраняет основную причину потери денег

Оптимизация дашборда MES. Устраняет внутренние проблемы и ускоряет выполнение заказов

Защита API. Не позволяет системе упасть под возросшей нагрузкой
