#ЦЯЗВИМЫЕ МЕСТА

1. RabbitMQ. Высокий риск потери или необработки сообщений

Новый заказ:
- Shop API - Очередь сообщений
- Очередь сообщений - CRM API

Подтверждение заказа (MANUFACTURING_APPROVED):
- CRM API - Очередь сообщений
- Очередь сообщений - MES API

Смена статуса (PRICE_CALCULATED, MANUFACTURING_STARTED и др):
- MES API - Очередь сообщений
- Очередь сообщений - CRM API

2. API. Высокий риск возникновения ошибок или повышенной задержки:

Создание заказа:
- API User - MES API

Создание заказа, загрузка файлов:
- Internet Shop - Shop API

Получение списка заказов, формирование дашборда:
- MES - MES API

Операции управления заказами:
- CRM - CRM API

3. Высокий риск таймаутов и прерывания операций:

Расчет стоимости заказа (2-30 мин):
- MES API

Загрузка и выгрузка файлов большого объема:
- Shop API - 3d files storage

4. Взаимодействие с базами данных. Риск медленного выполнения запросов и блокировок:

Запросы на дашборд, обновление статусов:
MES API - MES db
Shop API - Shop DB 
CRM API - Shop DB


Данные, которые должны попадать в трейсинг:

Trace ID. Уникальный идентификатор трейса
Span ID. Уникальный идентификатор операции
Временные метки
Теги:
- order_id - Идентификатор заказа
- status - Статус
- user_id - Идентификатор покупателя
- http.method
- http.url
- http.status_code
- messaging.system
- messaging.topic
Логи: Критические события, ошибки, payload сообщений


#МОТИВАЦИЯ

Команда тратит много времени на ручное исследование проблем с заказами. 
Это приводит к финансовым потерям, репутационным рискам и внутренним проблемам внутри команды.
Трейсинг будет эффективным способом получить полную картину прохождения запроса через все сервисы и очереди.

Технические метрики:

- MTTR - Mean Time To Resolution - Сокращение времени на выявление корневой причины инцидентов
- Latency - P50, P95, P99 - Позволит точно измерить и выявить узкие места на каждом этапе
- Error Rate - Четкое понимание, в каком сервисе и на каком этапе чаще всего возникают ошибки

Бизнес-метрики:

- Среднее время обработки заказа - Выявление этапов, где происходят наибольшие задержки, и их оптимизация
- Процент просроченных заказов - Снижение за счет более быстрого обнаружения и устранения зависших заказов
- Удовлетворенность клиентов (CSAT/NPS) -  Рост из-за уменьшения количества проблем и повышения прозрачности процесса для менеджеров


#ПРЕДЛАГАЕМОЕ РЕШЕНИЕ

OpenTelemetry (OTel) для инструментирования кода и экспорта данных
Jaeger для хранения трейсов и UI для их визуализации
Prometheus/Grafana для метрик

Компоненты:

1. OpenTelemetry Collector. Центральный компонент для приема, обработки и экспорта телеметрических данных (трейсов, метрик, логов)
2. Jaeger Backend. Включает в себя UI, collector, query service и storage
3. Во все сервисы (Shop API, CRM API, MES API) добавить библиотеки OpenTelemetry для соответствующего языка
4. Для трейсинга через RabbitMQ  настроить пропагацию контекста в заголовках сообщений через интерцепторы/инструментацию OpenTelemetry

```markdown
[Обновленная диаграмма]()
```


#КОМПРОМИССЫ

1. Производительность
Внедрение трейсинга добавляет небольшую задержку на каждый вызов и требует дополнительных ресурсов CPU и памяти в сервисах, а также сетевого трафика. 
Для высоконагруженных систем это может быть заметно. 

2. Сложность внедрения в легаси
Для кастомных или очень старых компонентов может потребоваться ручная работа, что увеличивает стоимость и время внедрения.
Проблемным местом может оказаться C# MES API, если он написан на старых версиях .NET Framework

3. Объем данных и стоимость хранения
Трейсы, особенно с включенными логами и полными payload, генерируют огромные объемы данных. 
Хранение их всех в течение длительного времени может быть очень дорогим

4.Трейсинг не поможет, если проблема находится за пределами интеграций. 


№АСПЕКТЫ БЕЗОПАСНОСТИ

Доступ к данным:
- Доступ к Jaeger UI строго ограничен по принципу наименьших привилегий
  Доступ только для членов команды разработки и DevOps через VPN или закрытый VPC с доступом по whitelist IP

Передача данных: 
- Все каналы передачи данных между сервисами должны быть зашифрованы с использованием TLS

Обезличивание данных (PII): 
- Необходимо строго следить за тем, какие данные попадают в теги и логи трейсов. 
  Запрещено логировать пароли, токены, персональные данные клиентов (email, телефоны) в открытом виде. 
  Для этого необходимо настроить процессоры в OpenTelemetry Collector, которые будут обезличивать или удалять чувствительные данные перед отправкой на хранение.
